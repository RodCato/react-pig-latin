{"ast":null,"code":"var _jsxFileName = \"/Users/learnacademy/Desktop/react-challenges/pig-latin-struggle-bus/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport butcherPigImage from './assets/butcherPig.jpeg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // ACTION ITEM: to make the development process easier there are some preassigned words in the input field, when you are ready for your full user experience delete the test words passed to useState and pass an empty string\n  const [userInput, setUserInput] = useState(\"apple through queen squeal fry fluent\");\n  const [inputTranslated, setInputTranslated] = useState(\"\"); // ACTION ITEM: the \"myPigLatinCodeHere\" function is where you will put your logic to translate the sentence entered by the user into Pig Latin\n\n  const myPigLatinCodeHere = () => {\n    // NO MODIFICATION NEEDED: the variable \"arrayOfUserInput\" will contain the text input from the user split into an array of words\n    const arrayOfUserInput = userInput.split(\" \");\n    console.log(\"arrayOfUserInput:\", arrayOfUserInput); // NO MODIFICATION NEEDED: now that we have an array of words, we can map over the array and look at each word\n\n    const translatedWordsArray = arrayOfUserInput.map(eachWord => {\n      console.log(\"eachWord:\", eachWord); // NO MODIFICATION NEEDED: this code will look at each word and identify the vowels\n\n      const vowelsArray = eachWord.split(\"\").filter(vowel => {\n        return vowel === \"a\" || vowel === \"e\" || vowel === \"i\" || vowel === \"o\" || vowel === \"u\";\n      });\n      console.log(\"vowelsArray:\", vowelsArray); // ACTION ITEM: your Pig Latin logic goes here!\n      // PseudoCode: The input is going to be an array. The output is going to be a string. The process: take the array, convert it to strings, and use our logic to check if the word begins with a vowel, and if it does, concatenate \"way\" to the end of the word. \n      // if(eachWord.includes(vowelsArray, [0])){\n      //   return(eachWord + \"way\")\n      // } \n      // example: \"eat\"[0]  output:\"e\"\n      // vowelsArray output is ['e', 'a']\n      // \"e\" === 'e'\n      // \"eatway\"\n      // const index = eachWord.indexOf(vowelsArray[0])\n      // const str1 = eachWord.slice(0, index)\n      // const str2 = eachWord.slice(index)\n      //   if(eachWord[0] === vowelsArray[0]){\n      //     return (eachWord + \"way\")\n      //   }\n      //   //Pseudo Code (qu-functionality)\n      //     // input is an array of words \n      //     //output string of words \n      //     //process: if qu is present in first 3 index values  \n      //   else if (vowelsArray.includes(\"u\") && eachWord[eachWord.indexOf(\"u\")-1] === \"q\"){\n      //     eachWord = str1 + str2 + \"ay\"\n      //   }\n      //   else if (vowelsArray.includes(\"u\"))\n\n      if (eachWord[0] === vowelsArray[0]) {\n        return eachWord + \"way\";\n      } else if (eachWord.substring(1, 3) === \"qu\") {\n        return eachWord.substring(3) + eachWord.substring(0, 3) + \"ay\";\n      } else if (eachWord.substring(0, 2) === \"qu\") {\n        return eachWord.substring(2) + \"quay\";\n      } else {\n        const firstVowelIndex = eachWord.split(\"\").findIndex(char => \"aeiouAEIOU\".includes(char)); // We use .split on eachWord and .findIndex on the resulting array to find the index of the first vowel. \n\n        if (firstVowelIndex === -1) {\n          // word contains no vowels, treat as a special case\n          return eachWord + \"ay\";\n        } else {\n          return eachWord.substring(firstVowelIndex) + eachWord.substring(0, firstVowelIndex) + \"ay\";\n        }\n      } // else if (eachWord.substring(0,3).includes(\"qu\") ) {\n      //   return eachWord.substring(eachWord.indexOf(\"qu\")) + \"quay\";}\n      // else if (eachWord.slice(1) + eachWord[0]){\n      //  return \n      // }\n      // ACTION ITEM: this return will be the output of your Pig Latin'd code\n\n\n      return eachWord;\n    }); // NO MODIFICATION NEEDED: once the code has been modified it gets joined from an array back to a string\n\n    const translatedWords = translatedWordsArray.join(\" \");\n    console.log(\"translatedWords:\", translatedWords); // NO MODIFICATION NEEDED: this will update the inputTranslated variable in state\n\n    setInputTranslated(translatedWords);\n  }; // ACTION ITEM: this method restarts the game by setting the original state, when you are ready for your full user experience delete the test words in setUserInput and pass an empty string\n\n\n  const restartGame = () => {\n    setUserInput(\"apple through queen squeal fry fluent\");\n    setInputTranslated(\"\");\n  }; // NO MODIFICATION NEEDED: this method prevents React from refreshing the page unnecessarily\n\n\n  const setUpPreventDefault = e => {\n    e.preventDefault();\n    myPigLatinCodeHere();\n  }; // NO MODIFICATION NEEDED: this method takes the value of the input and saves it in state\n\n\n  const handleInput = e => {\n    setUserInput(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Pig Latin Translator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: butcherPigImage,\n        alt: \"pig with butcher cut names in pig latin\",\n        className: \"butcher-pig-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Enter phrase to be translated:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"user-input\",\n          onChange: handleInput,\n          value: userInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: setUpPreventDefault,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: restartGame,\n          children: \"Clear\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: inputTranslated\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: \"\\xA9 2022 | Coded by: Your Names Here!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"zesh1YXCQBN+UepF8rG51/mgXSk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","butcherPigImage","App","userInput","setUserInput","inputTranslated","setInputTranslated","myPigLatinCodeHere","arrayOfUserInput","split","console","log","translatedWordsArray","map","eachWord","vowelsArray","filter","vowel","substring","firstVowelIndex","findIndex","char","includes","translatedWords","join","restartGame","setUpPreventDefault","e","preventDefault","handleInput","target","value"],"sources":["/Users/learnacademy/Desktop/react-challenges/pig-latin-struggle-bus/src/App.js"],"sourcesContent":["import React, { useState } from 'react'\nimport './App.css'\nimport butcherPigImage from './assets/butcherPig.jpeg'\n\nconst App = () => {\n\n  // ACTION ITEM: to make the development process easier there are some preassigned words in the input field, when you are ready for your full user experience delete the test words passed to useState and pass an empty string\n  const [userInput, setUserInput] = useState(\"apple through queen squeal fry fluent\")\n  const [inputTranslated, setInputTranslated] = useState(\"\")\n\n  // ACTION ITEM: the \"myPigLatinCodeHere\" function is where you will put your logic to translate the sentence entered by the user into Pig Latin\n  const myPigLatinCodeHere = () => {\n\n    // NO MODIFICATION NEEDED: the variable \"arrayOfUserInput\" will contain the text input from the user split into an array of words\n    const arrayOfUserInput = userInput.split(\" \")\n    console.log(\"arrayOfUserInput:\", arrayOfUserInput)\n\n    // NO MODIFICATION NEEDED: now that we have an array of words, we can map over the array and look at each word\n    const translatedWordsArray = arrayOfUserInput.map(eachWord => {\n      console.log(\"eachWord:\", eachWord)\n\n      // NO MODIFICATION NEEDED: this code will look at each word and identify the vowels\n      const vowelsArray = eachWord.split(\"\").filter(vowel => {\n        return (\n          vowel === \"a\" || \n          vowel === \"e\" || \n          vowel === \"i\" || \n          vowel === \"o\" || \n          vowel === \"u\"\n        )\n      })\n      console.log(\"vowelsArray:\", vowelsArray)\n\n      // ACTION ITEM: your Pig Latin logic goes here!\n// PseudoCode: The input is going to be an array. The output is going to be a string. The process: take the array, convert it to strings, and use our logic to check if the word begins with a vowel, and if it does, concatenate \"way\" to the end of the word. \n      // if(eachWord.includes(vowelsArray, [0])){\n      //   return(eachWord + \"way\")\n      // } \n      // example: \"eat\"[0]  output:\"e\"\n      // vowelsArray output is ['e', 'a']\n      // \"e\" === 'e'\n      // \"eatway\"\n\n      \n      // const index = eachWord.indexOf(vowelsArray[0])\n      // const str1 = eachWord.slice(0, index)\n      // const str2 = eachWord.slice(index)\n      //   if(eachWord[0] === vowelsArray[0]){\n      //     return (eachWord + \"way\")\n      //   }\n      //   //Pseudo Code (qu-functionality)\n      //     // input is an array of words \n      //     //output string of words \n      //     //process: if qu is present in first 3 index values  \n      //   else if (vowelsArray.includes(\"u\") && eachWord[eachWord.indexOf(\"u\")-1] === \"q\"){\n      //     eachWord = str1 + str2 + \"ay\"\n      //   }\n      //   else if (vowelsArray.includes(\"u\"))\n         \n      if(eachWord[0] === vowelsArray[0]){\n         return (eachWord + \"way\")\n      } else if (eachWord.substring(1, 3) === \"qu\") {\n        return eachWord.substring(3) + eachWord.substring(0, 3) + \"ay\";\n      } else if (eachWord.substring(0,2) === \"qu\") {\n        return eachWord.substring(2) + \"quay\";\n      } else {\n        const firstVowelIndex = eachWord.split(\"\").findIndex(char => \"aeiouAEIOU\".includes(char));\n        // We use .split on eachWord and .findIndex on the resulting array to find the index of the first vowel. \n        if (firstVowelIndex === -1) {\n          // word contains no vowels, treat as a special case\n          return eachWord + \"ay\";\n        } else {\n          return eachWord.substring(firstVowelIndex) + eachWord.substring(0, firstVowelIndex) + \"ay\";\n        }\n      }\n         \n          // else if (eachWord.substring(0,3).includes(\"qu\") ) {\n          //   return eachWord.substring(eachWord.indexOf(\"qu\")) + \"quay\";}\n     \n        // else if (eachWord.slice(1) + eachWord[0]){\n        //  return \n\n        // }\n      // ACTION ITEM: this return will be the output of your Pig Latin'd code\n      return eachWord\n    })\n\n    // NO MODIFICATION NEEDED: once the code has been modified it gets joined from an array back to a string\n    const translatedWords = translatedWordsArray.join(\" \")\n    console.log(\"translatedWords:\", translatedWords)\n\n    // NO MODIFICATION NEEDED: this will update the inputTranslated variable in state\n    setInputTranslated(translatedWords)\n  }\n\n  // ACTION ITEM: this method restarts the game by setting the original state, when you are ready for your full user experience delete the test words in setUserInput and pass an empty string\n  const restartGame = () => {\n    setUserInput(\"apple through queen squeal fry fluent\")\n    setInputTranslated(\"\")\n  }\n\n  // NO MODIFICATION NEEDED: this method prevents React from refreshing the page unnecessarily\n  const setUpPreventDefault = (e) => {\n    e.preventDefault()\n    myPigLatinCodeHere()\n  }\n\n  // NO MODIFICATION NEEDED: this method takes the value of the input and saves it in state\n  const handleInput = (e) => {\n    setUserInput(e.target.value)\n  }\n\n  return (\n    <div className=\"page-container\">\n      <div className=\"body-container\">\n        <h1>Pig Latin Translator</h1>\n        <img\n          src={butcherPigImage}\n          alt=\"pig with butcher cut names in pig latin\"\n          className=\"butcher-pig-image\"\n        />\n\n        <div className=\"input-section\">\n          <h4>Enter phrase to be translated:</h4>\n          <input\n            type=\"text\"\n            className=\"user-input\"\n            onChange={handleInput}\n            value={userInput}\n          />\n          <br />\n          <button onClick={setUpPreventDefault}>Submit</button>\n          <button onClick={restartGame}>Clear</button>\n        </div>\n        <p>{inputTranslated}</p>\n      </div>\n      <footer>&copy; 2022 | Coded by: Your Names Here!</footer>\n    </div>\n  )\n}\n\nexport default App"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,WAAP;AACA,OAAOC,eAAP,MAA4B,0BAA5B;;;AAEA,MAAMC,GAAG,GAAG,MAAM;EAAA;;EAEhB;EACA,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CAAC,uCAAD,CAA1C;EACA,MAAM,CAACK,eAAD,EAAkBC,kBAAlB,IAAwCN,QAAQ,CAAC,EAAD,CAAtD,CAJgB,CAMhB;;EACA,MAAMO,kBAAkB,GAAG,MAAM;IAE/B;IACA,MAAMC,gBAAgB,GAAGL,SAAS,CAACM,KAAV,CAAgB,GAAhB,CAAzB;IACAC,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCH,gBAAjC,EAJ+B,CAM/B;;IACA,MAAMI,oBAAoB,GAAGJ,gBAAgB,CAACK,GAAjB,CAAqBC,QAAQ,IAAI;MAC5DJ,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBG,QAAzB,EAD4D,CAG5D;;MACA,MAAMC,WAAW,GAAGD,QAAQ,CAACL,KAAT,CAAe,EAAf,EAAmBO,MAAnB,CAA0BC,KAAK,IAAI;QACrD,OACEA,KAAK,KAAK,GAAV,IACAA,KAAK,KAAK,GADV,IAEAA,KAAK,KAAK,GAFV,IAGAA,KAAK,KAAK,GAHV,IAIAA,KAAK,KAAK,GALZ;MAOD,CARmB,CAApB;MASAP,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BI,WAA5B,EAb4D,CAe5D;MACN;MACM;MACA;MACA;MACA;MACA;MACA;MACA;MAGA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA,IAAGD,QAAQ,CAAC,CAAD,CAAR,KAAgBC,WAAW,CAAC,CAAD,CAA9B,EAAkC;QAC/B,OAAQD,QAAQ,GAAG,KAAnB;MACF,CAFD,MAEO,IAAIA,QAAQ,CAACI,SAAT,CAAmB,CAAnB,EAAsB,CAAtB,MAA6B,IAAjC,EAAuC;QAC5C,OAAOJ,QAAQ,CAACI,SAAT,CAAmB,CAAnB,IAAwBJ,QAAQ,CAACI,SAAT,CAAmB,CAAnB,EAAsB,CAAtB,CAAxB,GAAmD,IAA1D;MACD,CAFM,MAEA,IAAIJ,QAAQ,CAACI,SAAT,CAAmB,CAAnB,EAAqB,CAArB,MAA4B,IAAhC,EAAsC;QAC3C,OAAOJ,QAAQ,CAACI,SAAT,CAAmB,CAAnB,IAAwB,MAA/B;MACD,CAFM,MAEA;QACL,MAAMC,eAAe,GAAGL,QAAQ,CAACL,KAAT,CAAe,EAAf,EAAmBW,SAAnB,CAA6BC,IAAI,IAAI,aAAaC,QAAb,CAAsBD,IAAtB,CAArC,CAAxB,CADK,CAEL;;QACA,IAAIF,eAAe,KAAK,CAAC,CAAzB,EAA4B;UAC1B;UACA,OAAOL,QAAQ,GAAG,IAAlB;QACD,CAHD,MAGO;UACL,OAAOA,QAAQ,CAACI,SAAT,CAAmBC,eAAnB,IAAsCL,QAAQ,CAACI,SAAT,CAAmB,CAAnB,EAAsBC,eAAtB,CAAtC,GAA+E,IAAtF;QACD;MACF,CAxD2D,CA0DxD;MACA;MAEF;MACA;MAEA;MACF;;;MACA,OAAOL,QAAP;IACD,CAnE4B,CAA7B,CAP+B,CA4E/B;;IACA,MAAMS,eAAe,GAAGX,oBAAoB,CAACY,IAArB,CAA0B,GAA1B,CAAxB;IACAd,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCY,eAAhC,EA9E+B,CAgF/B;;IACAjB,kBAAkB,CAACiB,eAAD,CAAlB;EACD,CAlFD,CAPgB,CA2FhB;;;EACA,MAAME,WAAW,GAAG,MAAM;IACxBrB,YAAY,CAAC,uCAAD,CAAZ;IACAE,kBAAkB,CAAC,EAAD,CAAlB;EACD,CAHD,CA5FgB,CAiGhB;;;EACA,MAAMoB,mBAAmB,GAAIC,CAAD,IAAO;IACjCA,CAAC,CAACC,cAAF;IACArB,kBAAkB;EACnB,CAHD,CAlGgB,CAuGhB;;;EACA,MAAMsB,WAAW,GAAIF,CAAD,IAAO;IACzBvB,YAAY,CAACuB,CAAC,CAACG,MAAF,CAASC,KAAV,CAAZ;EACD,CAFD;;EAIA,oBACE;IAAK,SAAS,EAAC,gBAAf;IAAA,wBACE;MAAK,SAAS,EAAC,gBAAf;MAAA,wBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QACE,GAAG,EAAE9B,eADP;QAEE,GAAG,EAAC,yCAFN;QAGE,SAAS,EAAC;MAHZ;QAAA;QAAA;QAAA;MAAA,QAFF,eAQE;QAAK,SAAS,EAAC,eAAf;QAAA,wBACE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAEE;UACE,IAAI,EAAC,MADP;UAEE,SAAS,EAAC,YAFZ;UAGE,QAAQ,EAAE4B,WAHZ;UAIE,KAAK,EAAE1B;QAJT;UAAA;UAAA;UAAA;QAAA,QAFF,eAQE;UAAA;UAAA;UAAA;QAAA,QARF,eASE;UAAQ,OAAO,EAAEuB,mBAAjB;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QATF,eAUE;UAAQ,OAAO,EAAED,WAAjB;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAVF;MAAA;QAAA;QAAA;QAAA;MAAA,QARF,eAoBE;QAAA,UAAIpB;MAAJ;QAAA;QAAA;QAAA;MAAA,QApBF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAuBE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAvBF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AA2BD,CAvID;;GAAMH,G;;KAAAA,G;AAyIN,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}